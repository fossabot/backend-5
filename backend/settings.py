"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Dotenv configuration

DOTENV_PATH = os.path.join(BASE_DIR, '.env')
load_dotenv(DOTENV_PATH)

# Helper for dotenv coercing
def env(key, coerce=str, allow_none=False):
    val = os.getenv(key)
    if val is None and not allow_none:
        raise ImproperlyConfigured(f"Missing environment variable {key}. Add it to {DOTENV_PATH}")
    if val is None:
        return None
    if coerce == bool:
        return val.lower() == 'true'
    else:
        return coerce(val)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secrets used in production secret!
SECRET_KEY = env('SECRET_KEY')
SENDGRID_API_KEY = env('SENDGRID_API_KEY')
GITHUB_API_KEY = env('GITHUB_API_KEY')
GITHUB_API_USERNAME = env('GITHUB_API_USERNAME')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', bool)

ALLOWED_HOSTS = ['*.schoolsyst.com', 'localhost']

AUTH_USER_MODEL = 'common.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', 'django_extensions',
    'corsheaders', 'django_rest_passwordreset',
    'learn.apps.LearnConfig',
    'schedule.apps.ScheduleConfig',
    'common.apps.CommonConfig',
    'homework.apps.HomeworkConfig',
    'reports.apps.ReportsConfig'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middlewares.AuthenticationMiddlewareJWT',
    'request_logging.middleware.LoggingMiddleware'
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# CORS

SUBDOMAINS = ['app', 'api', 'dev', 'beta', 'www', 'admin']


if DEBUG:
    CORS_ORIGIN_WHITELIST = [ 'http://localhost:3000' ]
else:
    CORS_ORIGIN_WHITELIST = [ 'https://' + subdomain + '.schoolsyst.com' for subdomain in SUBDOMAINS ] + [ 'https://schoolsyst.com' ]


CORS_EXPOSE_HEADERS = [
    'access-control-allow-origin'
]

# Security
# https://docs.djangoproject.com/fr/3.0/howto/deployment/checklist/

if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_SSL_REDIRECT = True
    X_FRAME_OPTIONS = 'DENY'


# JWT
from datetime import timedelta
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': timedelta(hours=12), #WARN: this is not viable for production
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
    'JWT_ALLOW_REFRESH': True
}

# Requests logging
# https://pypi.org/project/django-request-logging/

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',  # change debug level as appropiate
            'propagate': False,
        },
    },
}
