# Generated by Django 2.2.4 on 2019-10-09 20:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('common', '0024_auto_20191007_0718'),
    ]

    operations = [
        migrations.RenameField(
            model_name='defaultsetting',
            old_name='namespace',
            new_name='category',
        ),
        migrations.RenameField(
            model_name='subject',
            old_name='grade_goal',
            new_name='goal',
        ),
        migrations.RemoveField(
            model_name='defaultsetting',
            name='kind',
        ),
        migrations.RemoveField(
            model_name='defaultsetting',
            name='required',
        ),
        migrations.RemoveField(
            model_name='subject',
            name='grade_weight',
        ),
        migrations.RemoveField(
            model_name='subject',
            name='physical_weight',
        ),
        migrations.AddField(
            model_name='defaultsetting',
            name='optional',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='defaultsetting',
            name='type',
            field=models.CharField(choices=[('TEXT', 'Texte'), ('DATETIME', 'Date & heure'), ('DATE', 'Date'), ('DATERANGE', 'Plage de date'), ('TIME', 'Heure'), ('TIMERANGE', 'Plage horaire'), ('SELECT', 'Choix'), ('INTEGER', 'Nombre entier'), ('FLOAT', 'Nombre décimal'), ('BOOLEAN', 'Booléen (oui/non)')], default=('TEXT', 'Texte'), max_length=9),
        ),
        migrations.AddField(
            model_name='subject',
            name='weight',
            field=models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(0, "The grade's weight cannot be negative")]),
        ),
        migrations.AlterField(
            model_name='defaultsetting',
            name='key',
            field=models.CharField(max_length=300, unique=True),
        ),
        migrations.AlterField(
            model_name='subject',
            name='abbreviation',
            field=models.CharField(max_length=3, validators=[django.core.validators.RegexValidator('[a-z_\\-]{2,3}', 'Please use exactly 2 or 3 lower-case letters (- and _ are also accepted)')]),
        ),
        migrations.AlterField(
            model_name='subject',
            name='name',
            field=models.CharField(max_length=300),
        ),
        migrations.AlterField(
            model_name='subject',
            name='room',
            field=models.CharField(blank=True, max_length=300, null=True),
        ),
        migrations.AlterField(
            model_name='subject',
            name='slug',
            field=models.SlugField(max_length=300),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('logged_in', models.DateTimeField(auto_now=True, verbose_name='Last login date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
